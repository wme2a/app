<?php 

/** 
 * This file has been auto-generated by REST Compile. 
 * 
 * You should not modify it, unless you know what you do. Any modification 
 * might cause serious damage, or even destroy your computer. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE. 
 */ 


// class auto-generated by REST Compile 
abstract class RestRequest { 

  // provide user and password for HTTP AUTH 
  private $_user = '';
  private $_password = '';

  // constructor 
  public function __construct() { 

  } 

  // the POST function 
  public function doPostCall($request, $postArgs) { 

    // initialize the session 
    $ch = curl_init($request); 

    // set curl options 
    curl_setopt ($ch, CURLOPT_POST, true); 
    curl_setopt ($ch, CURLOPT_POSTFIELDS, $postArgs); 
    curl_setopt($ch, CURLOPT_HEADER, true); 
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
    // provide credentials if they're established 
    if(!empty($this->_user) && !empty($this->_password)) { 
      curl_setopt($ch, CURLOPT_USERPWD, $this->_user . ':' . $this->_password); 
    }

    // do the POST and then close the session 
    $response = curl_exec($ch); 
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); 
    $headers = substr($response, 0, $header_size - 4); 
    $body = substr($response, $header_size); 
    curl_close($ch); 

    return $this->checkResponse($headers, $body); 

  } 

  // the GET function 
  public function doGetCall($request) { 

    // initialize the session 
    $ch = curl_init($request); 

    // set curl options 
    curl_setopt($ch, CURLOPT_HEADER, true); 
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 
    // provide credentials if they're established 
    if(!empty($this->_user) && !empty($this->_password)) { 
      curl_setopt($ch, CURLOPT_USERPWD, $this->_user . ':' . $this->_password); 
    }

    // do the GET and then close the session 
    $response = curl_exec($ch); 
    $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); 
    $headers = substr($response, 0, $header_size - 4); 
    $body = substr($response, $header_size); 
    curl_close($ch); 

    return $this->checkResponse($headers, $body); 

  } 

  // checks the status code of the response 
  private function checkResponse($headers, $body) { 

    $status_code = array(); 
    preg_match('/\d\d\d/', $headers, $status_code); 
    switch($status_code[0]) { 
      case 200: 
          break; //success 
     } 

    return $body; 

  } 

} 

// class auto-generated by REST Compile 
class Photos extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional
  private $_tags; // optional
  private $_geoFrame; // optional
  private $_sortBy; // optional
  private $_searchTerm; // optional
  private $_offset; // optional
  private $_limit; // optional
  private $_format; // optional 

  // constructor 
  public function __construct(
      $_apiKey = NULL,
      $_id = NULL,
      $_tags = NULL,
      $_geoFrame = NULL,
      $_sortBy = NULL,
      $_searchTerm = NULL,
      $_offset = NULL,
      $_limit = NULL,
      $_format = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
    $this->_tags = $_tags;
    $this->_geoFrame = $_geoFrame;
    $this->_sortBy = $_sortBy;
    $this->_searchTerm = $_searchTerm;
    $this->_offset = $_offset;
    $this->_limit = $_limit;
    $this->_format = $_format;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : '';
    $paramString .= ($this->getTags())?
      '&tags=' . urlencode($this->getTags()) : '';
    $paramString .= ($this->getGeoFrame())?
      '&geoFrame=' . urlencode($this->getGeoFrame()) : '';
    $paramString .= ($this->getSortBy())?
      '&sortBy=' . urlencode($this->getSortBy()) : '';
    $paramString .= ($this->getSearchTerm())?
      '&searchTerm=' . urlencode($this->getSearchTerm()) : '';
    $paramString .= ($this->getOffset())?
      '&offset=' . urlencode($this->getOffset()) : '';
    $paramString .= ($this->getLimit())?
      '&limit=' . urlencode($this->getLimit()) : '';
    $paramString .= ($this->getFormat())?
      '&format=' . urlencode($this->getFormat()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/photos';

    $response = $this->doGetCall($requestUri . '?' . $this->prepareParams()); 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Photos extends RestRequest { 

  // class variables 
  private $_name; // optional
  private $_apiKey; // optional 

  // constructor 
  public function __construct($_name = NULL, $_apiKey = NULL) { 

    // assign class variables 
    $this->_name = $_name;
    $this->_apiKey = $_apiKey;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getName())?
      '&name=' . urlencode($this->getName()) : '';
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/photos';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Photos extends RestRequest { 

  // class variables 
  private $_id; // optional
  private $_apiKey; // optional 

  // constructor 
  public function __construct($_id = NULL, $_apiKey = NULL) { 

    // assign class variables 
    $this->_id = $_id;
    $this->_apiKey = $_apiKey;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : '';
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/photos';

    $response = $this->doPostCall($requestUri, $this->prepareParams()); 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Photos extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/photos';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Users extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional
  private $_username; // optional
  private $_password; // optional
  private $_format; // optional 

  // constructor 
  public function __construct(
      $_apiKey = NULL,
      $_id = NULL,
      $_username = NULL,
      $_password = NULL,
      $_format = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
    $this->_username = $_username;
    $this->_password = $_password;
    $this->_format = $_format;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : '';
    $paramString .= ($this->getUsername())?
      '&username=' . urlencode($this->getUsername()) : '';
    $paramString .= ($this->getPassword())?
      '&password=' . urlencode($this->getPassword()) : '';
    $paramString .= ($this->getFormat())?
      '&format=' . urlencode($this->getFormat()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/users';

    $response = $this->doGetCall($requestUri . '?' . $this->prepareParams()); 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Users extends RestRequest { 

  // class variables 
  private $_apiKey; // optional 

  // constructor 
  public function __construct($_apiKey = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/users';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Users extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/users';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Comments extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional
  private $_photoId; // optional
  private $_format; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL, $_photoId = NULL, $_format = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
    $this->_photoId = $_photoId;
    $this->_format = $_format;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : '';
    $paramString .= ($this->getPhotoId())?
      '&photoId=' . urlencode($this->getPhotoId()) : '';
    $paramString .= ($this->getFormat())?
      '&format=' . urlencode($this->getFormat()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/comments';

    $response = $this->doGetCall($requestUri . '?' . $this->prepareParams()); 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Comments extends RestRequest { 

  // class variables 
  private $_apiKey; // optional 

  // constructor 
  public function __construct($_apiKey = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/comments';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Comments extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/comments';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Ratings extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional
  private $_photoId; // optional
  private $_format; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL, $_photoId = NULL, $_format = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
    $this->_photoId = $_photoId;
    $this->_format = $_format;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : '';
    $paramString .= ($this->getPhotoId())?
      '&photoId=' . urlencode($this->getPhotoId()) : '';
    $paramString .= ($this->getFormat())?
      '&format=' . urlencode($this->getFormat()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/ratings';

    $response = $this->doGetCall($requestUri . '?' . $this->prepareParams()); 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Ratings extends RestRequest { 

  // class variables 
  private $_apiKey; // optional 

  // constructor 
  public function __construct($_apiKey = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/ratings';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}

// class auto-generated by REST Compile 
class Ratings extends RestRequest { 

  // class variables 
  private $_apiKey; // optional
  private $_id; // optional 

  // constructor 
  public function __construct($_apiKey = NULL, $_id = NULL) { 

    // assign class variables 
    $this->_apiKey = $_apiKey;
    $this->_id = $_id;
 
  } 

  // prepares the POST or GET parameters 
  private function prepareParams() { 

    $paramString = ''; 

    // optional parameters
    $paramString .= ($this->getApiKey())?
      '&apiKey=' . urlencode($this->getApiKey()) : '';
    $paramString .= ($this->getId())?
      '&id=' . urlencode($this->getId()) : ''; 

    // strip off the first '&' 
    if (strlen($paramString) > 0) {
      $paramString = substr($paramString, 1);
    }
    return $paramString; 

  } 

  // submits the request 
  public function submit() { 

    $requestUri = 'http://www.mmt.inf.tu-dresden.de/photon/PhotonEmitter/ratings';

 

    return $response; 

  } 

  // dynamic get and set thanks to the magic of __call 
  private function __call($method, $arguments) { 

    $prefix = strtolower(substr($method, 0, 3)); 
    $property = strtolower(substr($method, 3, 1)) . substr($method, 4); 

    if ((empty($prefix)) || (empty($property))) { 
      return; 
    } 

    // make sure that either the $var, the private $_var, or the
    // protected $_Tvar exist 
    if (!isset($this->$property)) { 
      $property = '_' . $property; 
    } 
    if (!isset($this->$property)) { 
       $property = '_T' . substr($property, 1); 
    } 
    if (!isset($this->$property)) { 
      return; 
    } 

    // now set or get the property 
    if ($prefix == "get") { 
      return $this->$property; 
    } 
    if ($prefix == "set") { 
      $this->$property = $arguments[0]; 
      return $this; 
    } 

  } 

}
 
?>